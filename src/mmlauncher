#!/usr/bin/python
# -*- coding: utf8 -*-

import sys
import os
import ConfigParser
import json
try:
    from Tkinter import *
except ImportError:
    sys.stderr.write("Looks like the Tkinter toolkit is not installed.\n"
                     "Install it with:  sudo apt-get install python-tk\n")
    sys.exit(1)


class Interface(object):
    """
    Interface of MicroMediaLauncher.
    """
    def __init__(self, callback, bg="black", fg="white", font=("Helvetica", 36)):
        """
        `callback` is a callable which will be called when the user activates
        an item (dir, file). It will be passed the item's name. `bg` and `fg`
        control the interface color. `font` controls the interface font.
        """
        self.callback = callback
        self.bg = bg
        self.fg = fg
        self.font = font
        self.activated_stack = []

        self.root = Tk()
        self.root.attributes("-fullscreen", True)
        self.root.bind("<Escape>", lambda e: e.widget.quit())

        scrollbar = Scrollbar(self.root)
        scrollbar.pack(side=RIGHT, fill=Y)

        self.listbox = Listbox(self.root, yscrollcommand=scrollbar.set,
                               font=self.font, bg=self.bg, fg=self.fg,
                               selectborderwidth=0, borderwidth=50,
                               relief='flat')
        self.listbox.pack(side=LEFT, fill=BOTH, expand=YES)
        self.listbox.bind("<Return>", self._listbox_activate)
        self.listbox.bind("<BackSpace>", self._listbox_back)
        self.listbox.bind("<Up>", self._listbox_up)
        self.listbox.bind("<Down>", self._listbox_down)

        scrollbar.config(command=self.listbox.yview, bg=self.bg)

    def set_files(self, file_list):
        """
        Set the files to display in the interface to `file_list`. It should be
        a list containing dictionaries, where each dictionary is like:

           {
             "title": "My.Movie.avi",
             "color": "red"
           }

        """
        self.listbox.delete(0, END)

        self.listbox.insert(END, "â‡¦ Back")
        self.listbox.itemconfig(END, fg='steel blue')
        self.listbox.activate(0)
        self.listbox.selection_set(0)

        for item in file_list:
            self.listbox.insert(END, item['title'])
            self.listbox.itemconfig(END, fg=item['color'])
            if self.activated_stack and self.activated_stack[-1] == item['title']:
                self.activated_stack.pop()
                self.listbox.activate(END)
                self.listbox.selection_clear(0, END)
                self.listbox.selection_set(END)
                self.listbox.see(END)
        self.listbox.focus_set()

    def _listbox_move_cur(self, i):
        self.listbox.activate(i)
        self.listbox.selection_clear(0, END)
        self.listbox.selection_set(i)
        self.listbox.see(i)

    def _listbox_activate(self, event):
        """
        Event callback when the user activates an item.
        """
        cursel = event.widget.curselection()[0]
        if cursel == 0:
            cur_item = '..'
        else:
            cur_item = self.listbox.get(cursel)
            if cur_item.endswith('/'):
                self.activated_stack.append(cur_item)

        self.callback(cur_item)

    def _listbox_back(self, event):
        """
        Event callback when the user pressed Backspace.
        """
        self.callback('..')

    def _listbox_up(self, event):
        """
        Move cursor to bottom if pressing Up on first item
        """
        cursel = event.widget.curselection()[0]
        if cursel == 0:
            self._listbox_move_cur(END)
            return "break"

    def _listbox_down(self, event):
        """
        Move cursor to top if pressing Down on last item
        """
        cursel = event.widget.curselection()[0]
        end = len(self.listbox.get(0, END))
        if cursel == end - 1:
            self._listbox_move_cur(0)
            return "break"

    def mark_watched(self, item_name, watched_color):
        """
        Mark the item in the list with title `item_name` with the color given
        in `watched_color`.
        """
        for index, item in enumerate(self.listbox.get(0, END)):
            if item == item_name:
                self.listbox.itemconfig(index, fg=watched_color)

class MediaMeta(object):
    """
    Hold meta information on how to handle media in mmlauncher, such as
    commands and colors.
    """
    def __init__(self):
        self.media_types = {}
        self.media_extensions = {}

    def add_media_extension(self, extension, media_type):
        self.media_extensions[extension] = media_type

    def add_media_type(self, media_type, color="white", command="xdg-open '%s'"):
        self.media_types[media_type] = {
            "color": color,
            "command": command,
        }

    def get_file_media_type(self, path):
        extension = os.path.splitext(path)[1].lstrip('.')
        media_type = self.media_extensions.get(extension, 'default')
        return self.media_types[media_type]

    def get_file_color(self, path):
        media_type = self.get_file_media_type(path)
        return media_type['color']

    def get_file_command(self, path):
        media_type = self.get_file_media_type(path)
        return media_type['command']


class MediaLister(object):
    def __init__(self, path, mediameta):
        self.path = path
        self.mediameta = mediameta

    def read_dir(self, path, watched, watched_color='dim gray'):
        file_list = []
        for fname in self._read_sorted_dir(path):
            fullpath = os.path.join(path, fname)
            if fullpath in watched:
                color = watched_color
            else:
                color = self.mediameta.get_file_color(fullpath)
            file_list.append(
                {
                    'title': fname,
                    'color': color,
                }
            )
        return file_list

    def _read_sorted_dir(self, path):
        """
        Return a sorted list of file and directory names in path.
        """
        dirs = []
        files = []
        for fname in os.listdir(path):
            fullpath = os.path.join(path, fname)
            if os.path.isdir(fullpath):
                dirs.append(fname + '/')
            else:
                files.append(fname)

        return sorted(dirs) + sorted(files)


class MediaRunner(object):
    def __init__(self, mediameta):
        self.mediameta = mediameta

    def run(self, path):
        cmd = self.mediameta.get_file_command(path)
        os.system(cmd % (path))


class Controller(object):
    def __init__(self, config_files, watched_file, path):
        self.config_files = config_files
        self.watched_file = watched_file
        self.path = os.path.realpath(path)
        self.watched = self.read_watched_file()

        self.mediameta = MediaMeta()
        self.read_config(self.config_files)
        self.medialister = MediaLister(path, self.mediameta)
        self.mediarunner = MediaRunner(self.mediameta)
        interface_font = (self.cfg.get('main', 'font_family'),
                          self.cfg.get('main', 'font_size'))
        self.interface = Interface(self.activate_cb,
                                   bg=self.cfg.get('main', 'bg'),
                                   fg=self.cfg.get('main', 'fg'),
                                   font=interface_font)

        self.handle_path(path)

    def read_config(self, config_files):
        self.cfg = ConfigParser.ConfigParser()
        self.cfg.read(config_files)

        # Read media meta types
        media_types = {}
        for media_name, color in self.cfg.items('media_colors'):
            media_types.setdefault(media_name, {})['color'] = color
        for media_name, command in self.cfg.items('commands'):
            media_types.setdefault(media_name, {})['command'] = command
        for media_name, media_meta in media_types.items():
            self.mediameta.add_media_type(media_name,
                                          media_meta['color'],
                                          media_meta['command'])

        # Read media extensions
        for extension, media_name in self.cfg.items('extensions'):
            self.mediameta.add_media_extension(extension, media_name)

    def read_watched_file(self):
        try:
            return json.load(file(self.watched_file, 'r'))
        except IOError:
            return {}

    def write_watched_file(self):
        json.dump(self.watched, file(self.watched_file, 'w'))

    def handle_path(self, path):
        if os.path.isdir(path):
            self.path = os.path.realpath(path)
            file_info = self.medialister.read_dir(path, self.watched,
                                                  self.cfg.get('main', 'watched_color'))
            self.interface.set_files(file_info)
        else:
            self.mediarunner.run(path)
            self.watched[path] = True
            self.write_watched_file()

    def activate_cb(self, fname):
        fullpath = os.path.realpath(os.path.join(self.path, fname))
        self.handle_path(fullpath)
        if not os.path.isdir(fullpath):
            self.interface.mark_watched(fname, self.cfg.get('main', 'watched_color'))

    def run(self):
        mainloop()

if __name__ == "__main__":
    # Configuration dir
    confdir = os.path.expanduser('~/.mmlauncher')
    if not os.path.isdir(confdir):
        os.mkdir(confdir)

    # Commandline arguments
    if len(sys.argv) < 2:
        sys.stderr.write("Usage: {} <directory>\n".format(sys.argv[0]))
        sys.exit(1)

    # Configuration file
    config_files = [
        'mmlauncher.conf',
        os.path.expanduser('~/.mmlauncher/mmlauncher.conf')
    ]
    watched_file = os.path.expanduser('~/.mmlauncher/watched.json')
    controller = Controller(config_files, watched_file, sys.argv[1])
    controller.run()
